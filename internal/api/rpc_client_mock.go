// Code generated by MockGen. DO NOT EDIT.
// Source: mather.pb.go

// Package api is a generated GoMock package.
package api

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockMatherClient is a mock of MatherClient interface
type MockMatherClient struct {
	ctrl     *gomock.Controller
	recorder *MockMatherClientMockRecorder
}

// MockMatherClientMockRecorder is the mock recorder for MockMatherClient
type MockMatherClientMockRecorder struct {
	mock *MockMatherClient
}

// NewMockMatherClient creates a new mock instance
func NewMockMatherClient(ctrl *gomock.Controller) *MockMatherClient {
	mock := &MockMatherClient{ctrl: ctrl}
	mock.recorder = &MockMatherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatherClient) EXPECT() *MockMatherClientMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockMatherClient) Add(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathIntResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*MathIntResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockMatherClientMockRecorder) Add(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMatherClient)(nil).Add), varargs...)
}

// Subtract mocks base method
func (m *MockMatherClient) Subtract(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathIntResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subtract", varargs...)
	ret0, _ := ret[0].(*MathIntResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subtract indicates an expected call of Subtract
func (mr *MockMatherClientMockRecorder) Subtract(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subtract", reflect.TypeOf((*MockMatherClient)(nil).Subtract), varargs...)
}

// Multiply mocks base method
func (m *MockMatherClient) Multiply(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathIntResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Multiply", varargs...)
	ret0, _ := ret[0].(*MathIntResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Multiply indicates an expected call of Multiply
func (mr *MockMatherClientMockRecorder) Multiply(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Multiply", reflect.TypeOf((*MockMatherClient)(nil).Multiply), varargs...)
}

// Divide mocks base method
func (m *MockMatherClient) Divide(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathFloatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Divide", varargs...)
	ret0, _ := ret[0].(*MathFloatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Divide indicates an expected call of Divide
func (mr *MockMatherClientMockRecorder) Divide(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Divide", reflect.TypeOf((*MockMatherClient)(nil).Divide), varargs...)
}

// Hello mocks base method
func (m *MockMatherClient) Hello(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Hello", varargs...)
	ret0, _ := ret[0].(*HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello
func (mr *MockMatherClientMockRecorder) Hello(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockMatherClient)(nil).Hello), varargs...)
}

// MockMatherServer is a mock of MatherServer interface
type MockMatherServer struct {
	ctrl     *gomock.Controller
	recorder *MockMatherServerMockRecorder
}

// MockMatherServerMockRecorder is the mock recorder for MockMatherServer
type MockMatherServerMockRecorder struct {
	mock *MockMatherServer
}

// NewMockMatherServer creates a new mock instance
func NewMockMatherServer(ctrl *gomock.Controller) *MockMatherServer {
	mock := &MockMatherServer{ctrl: ctrl}
	mock.recorder = &MockMatherServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatherServer) EXPECT() *MockMatherServerMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockMatherServer) Add(arg0 context.Context, arg1 *MathRequest) (*MathIntResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(*MathIntResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockMatherServerMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMatherServer)(nil).Add), arg0, arg1)
}

// Subtract mocks base method
func (m *MockMatherServer) Subtract(arg0 context.Context, arg1 *MathRequest) (*MathIntResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subtract", arg0, arg1)
	ret0, _ := ret[0].(*MathIntResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subtract indicates an expected call of Subtract
func (mr *MockMatherServerMockRecorder) Subtract(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subtract", reflect.TypeOf((*MockMatherServer)(nil).Subtract), arg0, arg1)
}

// Multiply mocks base method
func (m *MockMatherServer) Multiply(arg0 context.Context, arg1 *MathRequest) (*MathIntResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Multiply", arg0, arg1)
	ret0, _ := ret[0].(*MathIntResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Multiply indicates an expected call of Multiply
func (mr *MockMatherServerMockRecorder) Multiply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Multiply", reflect.TypeOf((*MockMatherServer)(nil).Multiply), arg0, arg1)
}

// Divide mocks base method
func (m *MockMatherServer) Divide(arg0 context.Context, arg1 *MathRequest) (*MathFloatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Divide", arg0, arg1)
	ret0, _ := ret[0].(*MathFloatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Divide indicates an expected call of Divide
func (mr *MockMatherServerMockRecorder) Divide(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Divide", reflect.TypeOf((*MockMatherServer)(nil).Divide), arg0, arg1)
}

// Hello mocks base method
func (m *MockMatherServer) Hello(arg0 context.Context, arg1 *NameRequest) (*HelloResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello", arg0, arg1)
	ret0, _ := ret[0].(*HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello
func (mr *MockMatherServerMockRecorder) Hello(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockMatherServer)(nil).Hello), arg0, arg1)
}
