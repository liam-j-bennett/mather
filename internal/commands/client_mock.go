// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package commands is a generated GoMock package.
package commands

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMatherClient is a mock of MatherClient interface
type MockMatherClient struct {
	ctrl     *gomock.Controller
	recorder *MockMatherClientMockRecorder
}

// MockMatherClientMockRecorder is the mock recorder for MockMatherClient
type MockMatherClientMockRecorder struct {
	mock *MockMatherClient
}

// NewMockMatherClient creates a new mock instance
func NewMockMatherClient(ctrl *gomock.Controller) *MockMatherClient {
	mock := &MockMatherClient{ctrl: ctrl}
	mock.recorder = &MockMatherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatherClient) EXPECT() *MockMatherClientMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockMatherClient) Add(a, b int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", a, b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockMatherClientMockRecorder) Add(a, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMatherClient)(nil).Add), a, b)
}

// Subtract mocks base method
func (m *MockMatherClient) Subtract(a, b int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subtract", a, b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subtract indicates an expected call of Subtract
func (mr *MockMatherClientMockRecorder) Subtract(a, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subtract", reflect.TypeOf((*MockMatherClient)(nil).Subtract), a, b)
}

// Multiply mocks base method
func (m *MockMatherClient) Multiply(a, b int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Multiply", a, b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Multiply indicates an expected call of Multiply
func (mr *MockMatherClientMockRecorder) Multiply(a, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Multiply", reflect.TypeOf((*MockMatherClient)(nil).Multiply), a, b)
}

// Divide mocks base method
func (m *MockMatherClient) Divide(a, b int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Divide", a, b)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Divide indicates an expected call of Divide
func (mr *MockMatherClientMockRecorder) Divide(a, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Divide", reflect.TypeOf((*MockMatherClient)(nil).Divide), a, b)
}
